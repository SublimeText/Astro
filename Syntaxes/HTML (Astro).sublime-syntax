%YAML 1.2
---
# https://github.com/withastro/language-tools/tree/main/packages/vscode/syntaxes
# http://www.sublimetext.com/docs/syntax.html
name: HTML (Astro)
scope: source.astro
version: 2

extends: Packages/HTML/HTML.sublime-syntax

file_extensions:
  - astro

variables:
  header: ([A-Za-z0-9][\w -]*)(:)

  astro_component_name: |-
    (?x: ([$A-Z_]{{astro_component_char}}*)
    | ({{astro_component_char}}+)(\.)({{astro_component_char}}+) )

  astro_component_char: '[^/?!\s<>=]'

  typescript_mime_type: (?:(?:text|application)/(?:ts|typescript))

contexts:

  prototype:
    - meta_prepend: true
    - include: astro-interpolations

  main:
    - meta_include_prototype: false
    - meta_scope: text.html.astro meta.template.astro
    - match: ''
      push: [html, frontmatter]

  frontmatter:
    - meta_include_prototype: false
    # allow leading whitespace for proper highlighting in fenced code blocks
    - match: \s*(---)\s*\n
      captures:
        0: meta.frontmatter.astro
        1: punctuation.section.frontmatter.begin.astro
        2: constant.other.language-name.astro
      embed: scope:source.ts#script
      embed_scope: meta.frontmatter.astro source.ts.embedded.astro
      escape: ^\s*(---)\s*$\n?
      escape_captures:
        0: meta.frontmatter.astro
        1: punctuation.section.frontmatter.end.astro
      pop: 1
    # Ensure to highlight frontmatter if the syntax is embedded, but pop as early as possible
    - match: ^|(?=\S)
      pop: 1

  html:
    - include: preprocessor
    - include: doctype
    - include: comment
    - include: cdata
    - include: tag
    - include: entities

###[ CUSTOM HTML ]############################################################

  cdata-content:
    - meta_include_prototype: false
    - meta_scope: meta.tag.sgml.cdata.html
    - meta_content_scope: meta.string.html string.unquoted.cdata.html
    - match: ']]>'
      scope: punctuation.definition.tag.end.html
      pop: 1
    - include: astro-string-interpolations

  tag-attributes:
    - meta_prepend: true
    - include: astro-directives

  tag-attribute-value-content:
    - meta_prepend: true
    - include: astro-string-interpolations

  strings-common-content:
    - meta_prepend: true
    - include: astro-string-interpolations

  tag:
    - meta_prepend: true
    - include: astro-markdown-components
    - include: astro-components
    - include: astro-comments

###[ HTML SCRIPT TAG ]########################################################

  script-tag:
    - match: (<)((?i:script)){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.script.html
      push: script-typescript
    - match: (</)((?i:script){{tag_name_break}})
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.script.html
      push: script-close-tag-content

  script-common:
    - meta_prepend: true
    - include: script-lang-attribute

  script-lang-attribute:
    - match: (?i:lang(?:uage)?){{attribute_name_break}}
      scope: meta.attribute-with-value.lang.html entity.other.attribute-name.html
      set: script-lang-attribute-assignment

  script-lang-attribute-assignment:
    - meta_content_scope: meta.tag.script.begin.html meta.attribute-with-value.lang.html
    - match: =
      scope: punctuation.separator.key-value.html
      set: script-lang-attribute-value
    - match: (?=\S)
      set: script-typescript

  script-lang-attribute-value:
    - meta_include_prototype: false
    - meta_scope: meta.tag.script.begin.html meta.attribute-with-value.lang.html
    - include: script-lang-decider

  script-lang-decider:
    - match: (?i)(?=(?:js|javascript){{unquoted_attribute_break}}|\'(?:js|javascript)\'|"(?:js|javascript)")
      set:
        - script-javascript
        - tag-lang-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?=(?:ts|typescript){{unquoted_attribute_break}}|\'(?:ts|typescript)\'|"(?:ts|typescript)")
      set:
        - script-typescript
        - tag-lang-attribute-meta
        - tag-generic-attribute-value
    - match: (?=>|''|"")
      set:
        - script-typescript
        - tag-lang-attribute-meta
        - tag-generic-attribute-value
    - match: (?=\S)
      set:
        - script-other
        - tag-lang-attribute-meta
        - tag-generic-attribute-value

  tag-lang-attribute-meta:
    - meta_include_prototype: false
    - meta_scope: meta.attribute-with-value.lang.html
    - include: immediately-pop

  script-type-attribute:
    # required until https://github.com/sublimehq/Packages/pull/4061
    - match: (?i:type){{attribute_name_break}}
      scope: meta.attribute-with-value.type.html entity.other.attribute-name.html
      set: script-type-attribute-assignment

  script-type-attribute-assignment:
    - meta_include_prototype: false
    - meta_content_scope: meta.tag.script.begin.html meta.attribute-with-value.type.html
    - match: =
      scope: punctuation.separator.key-value.html
      set: script-type-attribute-value
    - match: (?=\S)
      set: script-typescript

  script-type-attribute-value:
    # required until https://github.com/sublimehq/Packages/pull/4061
    - meta_include_prototype: false
    - meta_scope: meta.tag.script.begin.html meta.attribute-with-value.type.html
    - include: script-type-decider

  script-type-decider:
    - meta_prepend: true
    - match: (?i)(?={{typescript_mime_type}}{{unquoted_attribute_break}}|'{{typescript_mime_type}}'|"{{typescript_mime_type}}")
      set:
        - script-typescript
        - tag-type-attribute-meta
        - tag-generic-attribute-value
    - match: (?=>|''|"")
      set:
        - script-typescript
        - tag-type-attribute-meta
        - tag-generic-attribute-value

  tag-type-attribute-meta:
    # required until https://github.com/sublimehq/Packages/pull/4061
    - meta_include_prototype: false
    - meta_scope: meta.attribute-with-value.type.html
    - include: immediately-pop

  script-typescript:
    - meta_scope: meta.tag.script.begin.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: script-typescript-content
    - include: script-common

  script-typescript-content:
    - meta_include_prototype: false
    - match: \s*((<!\[)(CDATA)(\[))
      captures:
        1: meta.tag.sgml.cdata.html
        2: punctuation.definition.tag.begin.html
        3: keyword.declaration.cdata.html
        4: punctuation.definition.tag.begin.html
      pop: 1  # make sure to match only once
      embed: scope:source.ts
      embed_scope: meta.tag.sgml.cdata.html source.ts.embedded.html
      escape: \]\]>
      escape_captures:
        0: meta.tag.sgml.cdata.html punctuation.definition.tag.end.html
    - match: '{{script_content_begin}}'
      captures:
        1: comment.block.html punctuation.definition.comment.begin.html
      pop: 1  # make sure to match only once
      embed: scope:source.ts
      embed_scope: source.ts.embedded.html
      escape: '{{script_content_end}}'
      escape_captures:
        1: source.ts.embedded.html
        2: comment.block.html punctuation.definition.comment.end.html
        3: source.ts.embedded.html
        4: comment.block.html punctuation.definition.comment.end.html

###[ HTML STYLE TAG ]#########################################################

  style-common:
    - meta_prepend: true
    - include: style-lang-attribute

  style-lang-attribute:
    - match: (?i:lang(?:uage)?){{attribute_name_break}}
      scope: meta.attribute-with-value.lang.html entity.other.attribute-name.html
      set: style-lang-attribute-assignment

  style-lang-attribute-assignment:
    - meta_content_scope: meta.tag.style.begin.html meta.attribute-with-value.lang.html
    - match: =
      scope: punctuation.separator.key-value.html
      set: style-lang-attribute-value
    - match: (?=\S)
      set: style-css

  style-lang-attribute-value:
    - meta_include_prototype: false
    - meta_scope: meta.tag.style.begin.html meta.attribute-with-value.lang.html
    - include: style-lang-decider

  style-lang-decider:
    - match: (?i)(?=postcss{{unquoted_attribute_break}}|'postcss'|"postcss")
      set:
        - style-postcss
        - tag-lang-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?=css{{unquoted_attribute_break}}|\'css\'|"css")
      set:
        - style-css
        - tag-lang-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?=less{{unquoted_attribute_break}}|\'less\'|"less")
      set:
        - style-less
        - tag-lang-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?=sass{{unquoted_attribute_break}}|\'sass\'|"sass")
      set:
        - style-sass
        - tag-lang-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?=scss{{unquoted_attribute_break}}|\'scss\'|"scss")
      set:
        - style-scss
        - tag-lang-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?=stylus{{unquoted_attribute_break}}|\'stylus\'|"stylus")
      set:
        - style-stylus
        - tag-lang-attribute-meta
        - tag-generic-attribute-value
    - match: (?=\S)
      set:
        - style-css
        - tag-lang-attribute-meta
        - tag-generic-attribute-value

  style-less:
    - meta_scope: meta.tag.style.begin.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: style-less-content
    - include: style-common

  style-less-content:
    - match: '{{style_content_begin}}'
      captures:
        1: comment.block.html punctuation.definition.comment.begin.html
      pop: 1
      embed: scope:source.less
      embed_scope: source.less.embedded.html
      escape: '{{style_content_end}}'
      escape_captures:
        1: source.less.embedded.html
        2: comment.block.html punctuation.definition.comment.end.html
        3: source.less.embedded.html
        4: comment.block.html punctuation.definition.comment.end.html

  style-postcss:
    - meta_scope: meta.tag.style.begin.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: style-postcss-content
    - include: style-common

  style-postcss-content:
    - match: '{{style_content_begin}}'
      captures:
        1: comment.block.html punctuation.definition.comment.begin.html
      pop: 1
      embed: scope:source.postcss
      embed_scope: source.postcss.embedded.html
      escape: '{{style_content_end}}'
      escape_captures:
        1: source.postcss.embedded.html
        2: comment.block.html punctuation.definition.comment.end.html
        3: source.postcss.embedded.html
        4: comment.block.html punctuation.definition.comment.end.html

  style-sass:
    - meta_scope: meta.tag.style.begin.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: style-sass-content
    - include: style-common

  style-sass-content:
    - match: '{{style_content_begin}}'
      captures:
        1: comment.block.html punctuation.definition.comment.begin.html
      pop: 1
      embed: scope:source.sass
      embed_scope: source.sass.embedded.html
      escape: '{{style_content_end}}'
      escape_captures:
        1: source.sass.embedded.html
        2: comment.block.html punctuation.definition.comment.end.html
        3: source.sass.embedded.html
        4: comment.block.html punctuation.definition.comment.end.html

  style-scss:
    - meta_scope: meta.tag.style.begin.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: style-scss-content
    - include: style-common

  style-scss-content:
    - match: '{{style_content_begin}}'
      captures:
        1: comment.block.html punctuation.definition.comment.begin.html
      pop: 1
      embed: scope:source.scss
      embed_scope: source.scss.embedded.html
      escape: '{{style_content_end}}'
      escape_captures:
        1: source.scss.embedded.html
        2: comment.block.html punctuation.definition.comment.end.html
        3: source.scss.embedded.html
        4: comment.block.html punctuation.definition.comment.end.html

  style-stylus:
    - meta_scope: meta.tag.style.begin.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: style-stylus-content
    - include: style-common

  style-stylus-content:
    - match: '{{style_content_begin}}'
      captures:
        1: comment.block.html punctuation.definition.comment.begin.html
      pop: 1
      embed: scope:source.stylus
      embed_scope: source.stylus.embedded.html
      escape: '{{style_content_end}}'
      escape_captures:
        1: source.stylus.embedded.html
        2: comment.block.html punctuation.definition.comment.end.html
        3: source.stylus.embedded.html
        4: comment.block.html punctuation.definition.comment.end.html

###[ ASTRO COMMENTS ]#########################################################

  astro-comments:
    - match: <\?
      scope: punctuation.definition.comment.begin.astro
      push: astro-comment-content

  astro-comment-content:
    - meta_include_prototype: false
    - meta_scope: comment.block.astro
    - match: '>'
      scope: punctuation.definition.comment.end.astro
      pop: true

###[ ASTRO COMPONENTS ]######################################################

  astro-components:
    - match: (<)({{astro_component_name}})
      captures:
        1: punctuation.definition.tag.begin.astro
        2: entity.name.tag.component.astro
        3: support.class.component.astro
        4: support.namespace.astro
        5: punctuation.accessor.dot.astro
        6: support.class.component.astro
      push: astro-tag-content
    - match: (</)({{astro_component_name}})
      captures:
        1: punctuation.definition.tag.begin.astro
        2: entity.name.tag.component.astro
        3: support.class.component.astro
        4: support.namespace.astro
        5: punctuation.accessor.dot.astro
        6: support.class.component.astro
      push: astro-close-tag-content

  astro-tag-content:
    - meta_include_prototype: false
    - meta_scope: meta.tag.component.begin.astro
    - match: (is)(:)(raw){{attribute_name_break}}
      scope: meta.attribute-with-value.astro
      captures:
        1: keyword.control.directive.astro
        2: punctuation.separator.key-value.astro
        3: variable.parameter.astro
      set: astro-component-raw
    - include: tag-attributes
    - include: astro-tag-end-maybe-self-closing

  astro-component-raw:
    - meta_include_prototype: false
    - meta_content_scope: meta.tag.component.begin.astro
    - match: '>'
      scope: meta.tag.component.begin.astro punctuation.definition.tag.end.astro
      set: astro-component-raw-content
    - include: tag-attributes
    - include: astro-tag-end-maybe-self-closing

  astro-component-raw-content:
    - include: astro-close-tag

  astro-close-tag:
    - match: (</)({{astro_component_name}})
      captures:
        1: punctuation.definition.tag.begin.astro
        2: entity.name.tag.component.astro
        3: support.class.component.astro
        4: support.namespace.astro
        5: punctuation.accessor.dot.astro
        6: support.class.component.astro
      set: astro-close-tag-content

  astro-close-tag-content:
    - meta_include_prototype: false
    - meta_scope: meta.tag.component.end.astro
    - include: astro-tag-end

  astro-tag-end:
    - match: (/?)(>)
      captures:
        1: invalid.illegal.punctuation.astro
        2: punctuation.definition.tag.end.astro
      pop: 1

  astro-tag-end-maybe-self-closing:
    - match: /?>
      scope: punctuation.definition.tag.end.astro
      pop: 1

###[ ASTRO MARKDOWN COMPONENTS ]##############################################

  astro-markdown-components:
    - match: (<)(Markdown){{tag_name_break}}
      captures:
        1: punctuation.definition.tag.begin.astro
        2: entity.name.tag.component.astro support.class.component.astro
      push: astro-markdown-begin-tag-content
    - match: (</)(Markdown)[{{ascii_space}}]*(>)
      scope: meta.tag.component.end.astro
      captures:
        1: punctuation.definition.tag.begin.astro
        2: entity.name.tag.component.astro support.class.component.astro
        3: punctuation.definition.tag.end.astro

  astro-markdown-begin-tag-content:
    - meta_include_prototype: false
    - meta_scope: meta.tag.component.begin.astro
    - match: '>'
      scope: meta.tag.component.begin.astro punctuation.definition.tag.end.astro
      embed: Markdown (Astro).sublime-syntax#indented-markdown
      embed_scope: text.html.markdown.astro
      escape: (?=</Markdown[{{ascii_space}}]*>)
      pop: 1
    - include: tag-attributes
    - include: astro-tag-end-maybe-self-closing

###[ ASTRO DIRECTIVES ]######################################################

  astro-directives:
    # https://docs.astro.build/en/reference/directives-reference
    - match: ({{astro_component_char}}+)(:)({{astro_component_char}}+)
      captures:
        1: keyword.control.directive.astro
        2: punctuation.separator.key-value.astro
        3: variable.parameter.astro
      push:
        - astro-tag-attribute-meta
        - tag-generic-attribute-assignment

  astro-tag-attribute-meta:
    - meta_include_prototype: false
    - meta_scope: meta.attribute-with-value.astro
    - include: immediately-pop

###[ ASTRO INTERPOLATIONS ]##################################################

  astro-string-interpolations:
    - match: \{
      scope: punctuation.section.interpolation.begin.astro
      push: astro-string-interpolation-body

  astro-string-interpolation-body:
    - clear_scopes: 1
    - meta_include_prototype: false
    - meta_scope: meta.interpolation.astro
    - meta_content_scope: source.tsx.embedded.astro
    - include: astro-interpolation-body

  astro-interpolations:
    - match: \{
      scope: punctuation.section.interpolation.begin.astro
      push: astro-interpolation-body

  astro-interpolation-body:
    - meta_include_prototype: false
    - meta_scope: meta.interpolation.astro
    - meta_content_scope: source.tsx.embedded.astro
    - match: \}
      scope: punctuation.section.interpolation.end.astro
      pop: 1
    - include: scope:source.tsx#script
      apply_prototype: true
